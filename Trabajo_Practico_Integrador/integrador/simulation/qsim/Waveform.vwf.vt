// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/24/2025 22:25:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Registros
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Registros_vlg_sample_tst(
	CLK,
	D0,
	InputEnable,
	OutputEnable,
	sampler_tx
);
input  CLK;
input  D0;
input  InputEnable;
input  OutputEnable;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or D0 or InputEnable or OutputEnable)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Registros_vlg_check_tst (
	Output,
	sampler_rx
);
input  Output;
input sampler_rx;

reg  Output_expected;

reg  Output_prev;

reg  Output_expected_prev;

reg  last_Output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Output_prev = Output;
end

// update expected /o prevs

always @(trigger)
begin
	Output_expected_prev = Output_expected;
end



// expected Output
initial
begin
	Output_expected = 1'bX;
end 
// generate trigger
always @(Output_expected or Output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Output = %b | ",Output_expected_prev);
	$display("| real Output = %b | ",Output_prev);
`endif
	if (
		( Output_expected_prev !== 1'bx ) && ( Output_prev !== Output_expected_prev )
		&& ((Output_expected_prev !== last_Output_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp = Output_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Registros_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg D0;
reg InputEnable;
reg OutputEnable;
// wires                                               
wire Output;

wire sampler;                             

// assign statements (if any)                          
Registros i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.D0(D0),
	.InputEnable(InputEnable),
	.\Output (Output),
	.OutputEnable(OutputEnable)
);

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	# 5000;
	repeat(98)
	begin
		CLK = 1'b0;
		CLK = #5000 1'b1;
		# 5000;
	end
	CLK = 1'b0;
	CLK = #5000 1'b1;
end 

// D0
initial
begin
	D0 = 1'b1;
	D0 = #2380 1'b0;
	D0 = #6500 1'b1;
	D0 = #3500 1'b0;
	D0 = #6500 1'b1;
	D0 = #1778 1'b0;
	D0 = #4067 1'b1;
	D0 = #2599 1'b0;
	D0 = #4067 1'b1;
	D0 = #2599 1'b0;
	D0 = #4067 1'b1;
	D0 = #2512 1'b0;
	D0 = #5300 1'b1;
	D0 = #4700 1'b0;
	D0 = #5300 1'b1;
	D0 = #5541 1'b0;
	D0 = #5400 1'b1;
	D0 = #3190 1'b0;
	D0 = #2306 1'b1;
	D0 = #4700 1'b0;
	D0 = #5429 1'b1;
	D0 = #2350 1'b0;
	D0 = #2650 1'b1;
	D0 = #2350 1'b0;
	D0 = #215 1'b1;
	D0 = #1455 1'b0;
	D0 = #5400 1'b1;
	D0 = #4600 1'b0;
	D0 = #5400 1'b1;
	D0 = #3145 1'b0;
	D0 = #780 1'b1;
	# 1633;
	repeat(2)
	begin
		D0 = 1'b0;
		D0 = #1700 1'b1;
		# 1633;
	end
	D0 = 1'b0;
	D0 = #1216 1'b1;
	D0 = #1500 1'b0;
	D0 = #3500 1'b1;
	D0 = #1500 1'b0;
	D0 = #3205 1'b1;
	D0 = #580 1'b0;
	D0 = #2600 1'b1;
	D0 = #2400 1'b0;
	D0 = #2600 1'b1;
	D0 = #1820 1'b0;
	D0 = #240 1'b1;
	# 1066;
	repeat(2)
	begin
		D0 = 1'b0;
		D0 = #2267 1'b1;
		# 1066;
	end
	D0 = 1'b0;
	D0 = #5374 1'b1;
	D0 = #4300 1'b0;
	D0 = #5700 1'b1;
	D0 = #4300 1'b0;
	D0 = #6461 1'b1;
	D0 = #3600 1'b0;
	D0 = #3278 1'b1;
	D0 = #1700 1'b0;
	D0 = #3300 1'b1;
	D0 = #1700 1'b0;
	D0 = #5574 1'b1;
	# 2066;
	repeat(2)
	begin
		D0 = 1'b0;
		D0 = #4600 1'b1;
		# 2066;
	end
	D0 = 1'b0;
	D0 = #1343 1'b1;
	D0 = #3766 1'b0;
	D0 = #10400 1'b1;
	D0 = #6508 1'b0;
	D0 = #13600 1'b1;
	D0 = #5726 1'b0;
	D0 = #751 1'b1;
	D0 = #1900 1'b0;
	D0 = #3100 1'b1;
	D0 = #1900 1'b0;
	D0 = #9125 1'b1;
	D0 = #8800 1'b0;
	D0 = #6543 1'b1;
	D0 = #2450 1'b0;
	D0 = #2550 1'b1;
	D0 = #2450 1'b0;
	D0 = #8683 1'b1;
	D0 = #6600 1'b0;
	D0 = #8793 1'b1;
	# 2999;
	repeat(2)
	begin
		D0 = 1'b0;
		D0 = #3667 1'b1;
		# 2999;
	end
	D0 = 1'b0;
	D0 = #24 1'b1;
	D0 = #2049 1'b0;
	D0 = #2900 1'b1;
	D0 = #2100 1'b0;
	D0 = #2900 1'b1;
	D0 = #2630 1'b0;
	D0 = #2800 1'b1;
	D0 = #3866 1'b0;
	D0 = #2800 1'b1;
	D0 = #3866 1'b0;
	D0 = #2800 1'b1;
	D0 = #1289 1'b0;
	D0 = #2467 1'b1;
	D0 = #5100 1'b0;
	D0 = #2433 1'b1;
	D0 = #3686 1'b0;
	D0 = #5800 1'b1;
	D0 = #4200 1'b0;
	D0 = #5800 1'b1;
	D0 = #1423 1'b0;
	D0 = #3667 1'b1;
	D0 = #2999 1'b0;
	D0 = #3667 1'b1;
	D0 = #2999 1'b0;
	D0 = #3667 1'b1;
	D0 = #2092 1'b0;
	D0 = #479 1'b1;
	# 1299;
	repeat(2)
	begin
		D0 = 1'b0;
		D0 = #2034 1'b1;
		# 1299;
	end
	D0 = 1'b0;
	D0 = #2186 1'b1;
	# 1933;
	repeat(2)
	begin
		D0 = 1'b0;
		D0 = #1400 1'b1;
		# 1933;
	end
	D0 = 1'b0;
	D0 = #2697 1'b1;
	D0 = #2000 1'b0;
	D0 = #3000 1'b1;
	D0 = #2000 1'b0;
	D0 = #1344 1'b1;
	D0 = #6400 1'b0;
	D0 = #13380 1'b1;
	D0 = #8000 1'b0;
	D0 = #15277 1'b1;
	D0 = #3300 1'b0;
	D0 = #3373 1'b1;
	D0 = #2486 1'b0;
	D0 = #6200 1'b1;
	D0 = #3800 1'b0;
	D0 = #6200 1'b1;
	D0 = #2302 1'b0;
	D0 = #3000 1'b1;
	D0 = #2000 1'b0;
	D0 = #3000 1'b1;
	D0 = #1868 1'b0;
	D0 = #2000 1'b1;
	D0 = #1333 1'b0;
	D0 = #2000 1'b1;
	D0 = #1333 1'b0;
	D0 = #2000 1'b1;
	D0 = #478 1'b0;
	D0 = #4279 1'b1;
	D0 = #5200 1'b0;
	D0 = #521 1'b1;
	D0 = #1563 1'b0;
	D0 = #4900 1'b1;
	D0 = #5100 1'b0;
	D0 = #4900 1'b1;
	D0 = #3537 1'b0;
	D0 = #2124 1'b1;
	D0 = #5500 1'b0;
	D0 = #4500 1'b1;
	D0 = #5500 1'b0;
	D0 = #2376 1'b1;
	D0 = #8611 1'b0;
	D0 = #9600 1'b1;
	D0 = #1789 1'b0;
	D0 = #5403 1'b1;
	D0 = #3900 1'b0;
	D0 = #697 1'b1;
	# 964;
	repeat(2)
	begin
		D0 = 1'b0;
		D0 = #1734 1'b1;
		# 1599;
	end
	D0 = 1'b0;
	D0 = #1734 1'b1;
	D0 = #2971 1'b0;
	D0 = #4400 1'b1;
	D0 = #5600 1'b0;
	D0 = #4400 1'b1;
	D0 = #3265 1'b0;
	D0 = #3337 1'b1;
	D0 = #1500 1'b0;
	D0 = #3500 1'b1;
	D0 = #1500 1'b0;
	D0 = #3122 1'b1;
	# 2999;
	repeat(2)
	begin
		D0 = 1'b0;
		D0 = #3667 1'b1;
		# 2999;
	end
	D0 = 1'b0;
	D0 = #8469 1'b1;
	D0 = #10800 1'b0;
	D0 = #1441 1'b1;
	D0 = #79 1'b0;
	D0 = #5700 1'b1;
	D0 = #4221 1'b0;
	D0 = #2597 1'b1;
	D0 = #3200 1'b0;
	D0 = #6800 1'b1;
	D0 = #3200 1'b0;
	D0 = #6946 1'b1;
	# 2666;
	repeat(2)
	begin
		D0 = 1'b0;
		D0 = #4000 1'b1;
		# 2666;
	end
	D0 = 1'b0;
	D0 = #1259 1'b1;
	D0 = #1353 1'b0;
	D0 = #11600 1'b1;
	D0 = #7047 1'b0;
	D0 = #1867 1'b1;
	D0 = #3000 1'b0;
	D0 = #7000 1'b1;
	D0 = #3000 1'b0;
	D0 = #5133 1'b1;
	D0 = #2664 1'b0;
	D0 = #5300 1'b1;
	D0 = #4700 1'b0;
	D0 = #5300 1'b1;
	D0 = #2036 1'b0;
	D0 = #1013 1'b1;
	D0 = #3600 1'b0;
	D0 = #5387 1'b1;
	D0 = #4836 1'b0;
	D0 = #4600 1'b1;
	D0 = #5400 1'b0;
	D0 = #4600 1'b1;
	D0 = #5903 1'b0;
	D0 = #10200 1'b1;
	D0 = #4461 1'b0;
	D0 = #8066 1'b1;
	D0 = #8400 1'b0;
	D0 = #6529 1'b1;
	D0 = #4600 1'b0;
	D0 = #2405 1'b1;
	D0 = #6797 1'b0;
	D0 = #9800 1'b1;
	D0 = #3403 1'b0;
	D0 = #3475 1'b1;
	# 2266;
	repeat(2)
	begin
		D0 = 1'b0;
		D0 = #4400 1'b1;
		# 2266;
	end
	D0 = 1'b0;
	D0 = #927 1'b1;
	D0 = #3569 1'b0;
	D0 = #5500 1'b1;
	D0 = #4500 1'b0;
	D0 = #5500 1'b1;
	D0 = #931 1'b0;
	D0 = #1525 1'b1;
	D0 = #6600 1'b0;
	D0 = #11875 1'b1;
	# 65;
	repeat(2)
	begin
		D0 = 1'b0;
		D0 = #1634 1'b1;
		# 1699;
	end
	D0 = 1'b0;
	D0 = #1634 1'b1;
	D0 = #1635 1'b0;
	D0 = #54 1'b1;
	D0 = #1950 1'b0;
	D0 = #3050 1'b1;
	D0 = #1950 1'b0;
	D0 = #2996 1'b1;
	D0 = #1153 1'b0;
	D0 = #6000 1'b1;
	D0 = #2847 1'b0;
	D0 = #1821 1'b1;
	D0 = #1750 1'b0;
	D0 = #3250 1'b1;
	D0 = #1750 1'b0;
end 

// InputEnable
always
begin
	InputEnable = 1'b0;
	InputEnable = #50000 1'b1;
	#50000;
end 

// OutputEnable
initial
begin
	OutputEnable = 1'b0;
	OutputEnable = #480000 1'b1;
	OutputEnable = #500000 1'b0;
end 

Registros_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.D0(D0),
	.InputEnable(InputEnable),
	.OutputEnable(OutputEnable),
	.sampler_tx(sampler)
);

Registros_vlg_check_tst tb_out(
	.Output(Output),
	.sampler_rx(sampler)
);
endmodule

