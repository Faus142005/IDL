// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/13/2025 19:59:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AnalizadorCorte
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AnalizadorCorte_vlg_sample_tst(
	CLK,
	Mayor,
	Menor,
	Reset,
	Restar,
	sampler_tx
);
input  CLK;
input  Mayor;
input  Menor;
input  Reset;
input  Restar;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or Mayor or Menor or Reset or Restar)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AnalizadorCorte_vlg_check_tst (
	Error,
	Fin,
	INTERMEDIO,
	Q0,
	sampler_rx
);
input  Error;
input  Fin;
input  INTERMEDIO;
input  Q0;
input sampler_rx;

reg  Error_expected;
reg  Fin_expected;
reg  INTERMEDIO_expected;
reg  Q0_expected;

reg  Error_prev;
reg  Fin_prev;
reg  INTERMEDIO_prev;
reg  Q0_prev;

reg  Error_expected_prev;
reg  Fin_expected_prev;
reg  INTERMEDIO_expected_prev;
reg  Q0_expected_prev;

reg  last_Error_exp;
reg  last_Fin_exp;
reg  last_INTERMEDIO_exp;
reg  last_Q0_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Error_prev = Error;
	Fin_prev = Fin;
	INTERMEDIO_prev = INTERMEDIO;
	Q0_prev = Q0;
end

// update expected /o prevs

always @(trigger)
begin
	Error_expected_prev = Error_expected;
	Fin_expected_prev = Fin_expected;
	INTERMEDIO_expected_prev = INTERMEDIO_expected;
	Q0_expected_prev = Q0_expected;
end



// expected Error
initial
begin
	Error_expected = 1'bX;
end 

// expected Fin
initial
begin
	Fin_expected = 1'bX;
end 

// expected INTERMEDIO
initial
begin
	INTERMEDIO_expected = 1'bX;
end 

// expected Q0
initial
begin
	Q0_expected = 1'bX;
end 
// generate trigger
always @(Error_expected or Error or Fin_expected or Fin or INTERMEDIO_expected or INTERMEDIO or Q0_expected or Q0)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Error = %b | expected Fin = %b | expected INTERMEDIO = %b | expected Q0 = %b | ",Error_expected_prev,Fin_expected_prev,INTERMEDIO_expected_prev,Q0_expected_prev);
	$display("| real Error = %b | real Fin = %b | real INTERMEDIO = %b | real Q0 = %b | ",Error_prev,Fin_prev,INTERMEDIO_prev,Q0_prev);
`endif
	if (
		( Error_expected_prev !== 1'bx ) && ( Error_prev !== Error_expected_prev )
		&& ((Error_expected_prev !== last_Error_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Error :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Error_expected_prev);
		$display ("     Real value = %b", Error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Error_exp = Error_expected_prev;
	end
	if (
		( Fin_expected_prev !== 1'bx ) && ( Fin_prev !== Fin_expected_prev )
		&& ((Fin_expected_prev !== last_Fin_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fin :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fin_expected_prev);
		$display ("     Real value = %b", Fin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fin_exp = Fin_expected_prev;
	end
	if (
		( INTERMEDIO_expected_prev !== 1'bx ) && ( INTERMEDIO_prev !== INTERMEDIO_expected_prev )
		&& ((INTERMEDIO_expected_prev !== last_INTERMEDIO_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INTERMEDIO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INTERMEDIO_expected_prev);
		$display ("     Real value = %b", INTERMEDIO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_INTERMEDIO_exp = INTERMEDIO_expected_prev;
	end
	if (
		( Q0_expected_prev !== 1'bx ) && ( Q0_prev !== Q0_expected_prev )
		&& ((Q0_expected_prev !== last_Q0_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q0_exp = Q0_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AnalizadorCorte_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg Mayor;
reg Menor;
reg Reset;
reg Restar;
// wires                                               
wire Error;
wire Fin;
wire INTERMEDIO;
wire Q0;

wire sampler;                             

// assign statements (if any)                          
AnalizadorCorte i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.Error(Error),
	.Fin(Fin),
	.INTERMEDIO(INTERMEDIO),
	.Mayor(Mayor),
	.Menor(Menor),
	.Q0(Q0),
	.Reset(Reset),
	.Restar(Restar)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// Mayor
initial
begin
	Mayor = 1'b1;
	Mayor = #370000 1'b0;
end 

// Menor
initial
begin
	Menor = 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #20000 1'b1;
end 

// Restar
initial
begin
	Restar = 1'b1;
end 

AnalizadorCorte_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.Mayor(Mayor),
	.Menor(Menor),
	.Reset(Reset),
	.Restar(Restar),
	.sampler_tx(sampler)
);

AnalizadorCorte_vlg_check_tst tb_out(
	.Error(Error),
	.Fin(Fin),
	.INTERMEDIO(INTERMEDIO),
	.Q0(Q0),
	.sampler_rx(sampler)
);
endmodule

