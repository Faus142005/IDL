// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2025 17:43:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Semaforo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Semaforo_vlg_sample_tst(
	CLK,
	RST,
	VCC,
	sampler_tx
);
input  CLK;
input  RST;
input  VCC;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or RST or VCC)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Semaforo_vlg_check_tst (
	A1,
	A2,
	A3,
	COUNT,
	R1,
	R2,
	R3,
	V1,
	V2,
	V3,
	sampler_rx
);
input  A1;
input  A2;
input  A3;
input  COUNT;
input  R1;
input  R2;
input  R3;
input  V1;
input  V2;
input  V3;
input sampler_rx;

reg  A1_expected;
reg  A2_expected;
reg  A3_expected;
reg  COUNT_expected;
reg  R1_expected;
reg  R2_expected;
reg  R3_expected;
reg  V1_expected;
reg  V2_expected;
reg  V3_expected;

reg  A1_prev;
reg  A2_prev;
reg  A3_prev;
reg  COUNT_prev;
reg  R1_prev;
reg  R2_prev;
reg  R3_prev;
reg  V1_prev;
reg  V2_prev;
reg  V3_prev;

reg  A1_expected_prev;
reg  A2_expected_prev;
reg  A3_expected_prev;
reg  COUNT_expected_prev;
reg  R1_expected_prev;
reg  R2_expected_prev;
reg  R3_expected_prev;
reg  V1_expected_prev;
reg  V2_expected_prev;
reg  V3_expected_prev;

reg  last_A1_exp;
reg  last_A2_exp;
reg  last_A3_exp;
reg  last_COUNT_exp;
reg  last_R1_exp;
reg  last_R2_exp;
reg  last_R3_exp;
reg  last_V1_exp;
reg  last_V2_exp;
reg  last_V3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	A1_prev = A1;
	A2_prev = A2;
	A3_prev = A3;
	COUNT_prev = COUNT;
	R1_prev = R1;
	R2_prev = R2;
	R3_prev = R3;
	V1_prev = V1;
	V2_prev = V2;
	V3_prev = V3;
end

// update expected /o prevs

always @(trigger)
begin
	A1_expected_prev = A1_expected;
	A2_expected_prev = A2_expected;
	A3_expected_prev = A3_expected;
	COUNT_expected_prev = COUNT_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	R3_expected_prev = R3_expected;
	V1_expected_prev = V1_expected;
	V2_expected_prev = V2_expected;
	V3_expected_prev = V3_expected;
end



// expected COUNT
initial
begin
	COUNT_expected = 1'bX;
end 

// expected V1
initial
begin
	V1_expected = 1'bX;
end 

// expected A1
initial
begin
	A1_expected = 1'bX;
end 

// expected R1
initial
begin
	R1_expected = 1'bX;
end 

// expected V2
initial
begin
	V2_expected = 1'bX;
end 

// expected A2
initial
begin
	A2_expected = 1'bX;
end 

// expected R2
initial
begin
	R2_expected = 1'bX;
end 

// expected V3
initial
begin
	V3_expected = 1'bX;
end 

// expected A3
initial
begin
	A3_expected = 1'bX;
end 

// expected R3
initial
begin
	R3_expected = 1'bX;
end 
// generate trigger
always @(A1_expected or A1 or A2_expected or A2 or A3_expected or A3 or COUNT_expected or COUNT or R1_expected or R1 or R2_expected or R2 or R3_expected or R3 or V1_expected or V1 or V2_expected or V2 or V3_expected or V3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A1 = %b | expected A2 = %b | expected A3 = %b | expected COUNT = %b | expected R1 = %b | expected R2 = %b | expected R3 = %b | expected V1 = %b | expected V2 = %b | expected V3 = %b | ",A1_expected_prev,A2_expected_prev,A3_expected_prev,COUNT_expected_prev,R1_expected_prev,R2_expected_prev,R3_expected_prev,V1_expected_prev,V2_expected_prev,V3_expected_prev);
	$display("| real A1 = %b | real A2 = %b | real A3 = %b | real COUNT = %b | real R1 = %b | real R2 = %b | real R3 = %b | real V1 = %b | real V2 = %b | real V3 = %b | ",A1_prev,A2_prev,A3_prev,COUNT_prev,R1_prev,R2_prev,R3_prev,V1_prev,V2_prev,V3_prev);
`endif
	if (
		( A1_expected_prev !== 1'bx ) && ( A1_prev !== A1_expected_prev )
		&& ((A1_expected_prev !== last_A1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A1_expected_prev);
		$display ("     Real value = %b", A1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A1_exp = A1_expected_prev;
	end
	if (
		( A2_expected_prev !== 1'bx ) && ( A2_prev !== A2_expected_prev )
		&& ((A2_expected_prev !== last_A2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A2_expected_prev);
		$display ("     Real value = %b", A2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_A2_exp = A2_expected_prev;
	end
	if (
		( A3_expected_prev !== 1'bx ) && ( A3_prev !== A3_expected_prev )
		&& ((A3_expected_prev !== last_A3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A3_expected_prev);
		$display ("     Real value = %b", A3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_A3_exp = A3_expected_prev;
	end
	if (
		( COUNT_expected_prev !== 1'bx ) && ( COUNT_prev !== COUNT_expected_prev )
		&& ((COUNT_expected_prev !== last_COUNT_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_COUNT_exp = COUNT_expected_prev;
	end
	if (
		( R1_expected_prev !== 1'bx ) && ( R1_prev !== R1_expected_prev )
		&& ((R1_expected_prev !== last_R1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp = R1_expected_prev;
	end
	if (
		( R2_expected_prev !== 1'bx ) && ( R2_prev !== R2_expected_prev )
		&& ((R2_expected_prev !== last_R2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp = R2_expected_prev;
	end
	if (
		( R3_expected_prev !== 1'bx ) && ( R3_prev !== R3_expected_prev )
		&& ((R3_expected_prev !== last_R3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R3_exp = R3_expected_prev;
	end
	if (
		( V1_expected_prev !== 1'bx ) && ( V1_prev !== V1_expected_prev )
		&& ((V1_expected_prev !== last_V1_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V1_expected_prev);
		$display ("     Real value = %b", V1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_V1_exp = V1_expected_prev;
	end
	if (
		( V2_expected_prev !== 1'bx ) && ( V2_prev !== V2_expected_prev )
		&& ((V2_expected_prev !== last_V2_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V2_expected_prev);
		$display ("     Real value = %b", V2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_V2_exp = V2_expected_prev;
	end
	if (
		( V3_expected_prev !== 1'bx ) && ( V3_prev !== V3_expected_prev )
		&& ((V3_expected_prev !== last_V3_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V3_expected_prev);
		$display ("     Real value = %b", V3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_V3_exp = V3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Semaforo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg RST;
reg VCC;
// wires                                               
wire A1;
wire A2;
wire A3;
wire COUNT;
wire R1;
wire R2;
wire R3;
wire V1;
wire V2;
wire V3;

wire sampler;                             

// assign statements (if any)                          
Semaforo i1 (
// port map - connection between master ports and signals/registers   
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.CLK(CLK),
	.COUNT(COUNT),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.RST(RST),
	.V1(V1),
	.V2(V2),
	.V3(V3),
	.\VCC (VCC)
);

// RST
initial
begin
	RST = 1'b1;
	RST = #20000 1'b0;
end 

// VCC
initial
begin
	VCC = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #2500 1'b1;
	#2500;
end 

Semaforo_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.RST(RST),
	.VCC(VCC),
	.sampler_tx(sampler)
);

Semaforo_vlg_check_tst tb_out(
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.COUNT(COUNT),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.V1(V1),
	.V2(V2),
	.V3(V3),
	.sampler_rx(sampler)
);
endmodule

